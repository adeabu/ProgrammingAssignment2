dur()
dir()
cd desktop
cd(desktop)
load(http://www.statistikdatabasen.scb.se/pxweb/sv/ssd/START__BE__BE0101__BE0101E/UtrikesFoddaR/table/tableViewLayout1/?rxid=7e415dda-4ea6-4d68-b230-889a1120b905&downloadfile=FileTypeCsvWithHeadingAndSpace, http://www.statistikdatabasen.scb.se/pxweb/sv/ssd/START__BE__BE0101__BE0101E/UtrikesFoddaR/table/tableViewLayout1/?rxid=7e415dda-4ea6-4d68-b230-889a1120b905)
load(http://www.statistikdatabasen.scb.se/pxweb/sv/ssd/START__BE__BE0101__BE0101E/UtrikesFoddaR/table/tableViewLayout1/?rxid=7e415dda-4ea6-4d68-b230-889a1120b905&downloadfile=FileTypeCsvWithHeadingAndSpace, http://www.statistikdatabasen.scb.se/pxweb/sv/ssd/START__BE__BE0101__BE0101E/UtrikesFoddaR/table/tableViewLayout1/?rxid=7e415dda-4ea6-4d68-b230-889a1120b905)
load("http://www.statistikdatabasen.scb.se/pxweb/sv/ssd/START__BE__BE0101__BE0101E/UtrikesFoddaR/table/tableViewLayout1/?rxid=7e415dda-4ea6-4d68-b230-889a1120b905&downloadfile=FileTypeCsvWithHeadingAndSpace, http://www.statistikdatabasen.scb.se/pxweb/sv/ssd/START__BE__BE0101__BE0101E/UtrikesFoddaR/table/tableViewLayout1/?rxid=7e415dda-4ea6-4d68-b230-889a1120b905")
read.table(file.choose())
read.table(file.choose(), header=TRUE)
read.csv(file.choose(), header=TRUE)
read.csv(file.choose())
data <- read.csv(file.choose())
data <- read.csv(file.choose())
data <- read.csv(file.choose())
write.data
data
data
plot.data
plot(data)
plot(data$"USJudgeRatings")
setwd("~/Desktop/GitHub/datasciencecoursera/ProgrammingAssignment2")
ls
ls()
dir()
source("cachematrix2.R")
m
m <- matrix(1:9,nrow = 3, ncol = 3)
m
cachesolve(m)
cacheSolve(m)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function(){
x
}
setinv <- function(x){
inv <<- solve(x)
}
getinv <- function(){
inv
}
cacheList <<- list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- makeCacheMatrix$getinv()
if(!is.null(x)) {
message("getting cached data")
return(x)
}
data <- cacheList$get(x)
inv <- solve(data)
cacheList$setinv(inv)
inv
}
cacheSolve(m)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function(){
x
}
setinv <- function(x){
inv <<- solve(x)
}
getinv <- function(){
inv
}
cacheList <<- list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- makeCacheMatrix()$getinv()
if(!is.null(x)) {
message("getting cached data")
return(x)
}
data <- cacheList$get(x)
inv <- solve(data)
cacheList$setinv(inv)
inv
}
cacheSolve(m)
cacheSolve(m)
x  <- m
cacheSolve(x)
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function(){
x
}
setinv <- function(m){
inv <<- solve(m)
}
getinv <- function(){
inv
}
cacheList <<- list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(m, ...) {
inv <- makeCacheMatrix()$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(m)
}
data <- cacheList$get(m)
inv <- solve(data)
cacheList$setinv(inv)
inv
}
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function(){
x
}
setinv <- function(m){
inv <<- solve(m)
}
getinv <- function(){
inv
}
cacheList <<- list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(m, ...) {
inv <- makeCacheMatrix()$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(m)
}
data <- cacheList$get()
inv <- solve(data)
cacheList$setinv(inv)
inv
}
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function(){
x
}
setinv <- function(m){
inv <<- solve(m)
}
getinv <- function(){
inv
}
cacheList <<- list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(m, ...) {
inv <- makeCacheMatrix()$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(m)
}
data <- cacheList$get(m)
inv <- solve(data)
cacheList$setinv(inv)
inv
}
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function(){
x
}
setinv <- function(m){
inv <<- solve(m)
}
getinv <- function(){
inv
}
cacheList <<- list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(m, ...) {
inv <- makeCacheMatrix()$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(m)
}
data <- cacheList$get()
inv <- solve(data)
cacheList$setinv(inv)
inv
}
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function(){
m
}
setinv <- function(m){
inv <<- solve(m)
}
getinv <- function(){
inv
}
cacheList <<- list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(m, ...) {
inv <- makeCacheMatrix()$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(m)
}
data <- cacheList$get()
inv <- solve(data)
cacheList$setinv(inv)
inv
}
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function(x){
x
}
setinv <- function(m){
inv <<- solve(m)
}
getinv <- function(){
inv
}
cacheList <<- list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(m, ...) {
inv <- makeCacheMatrix()$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(m)
}
data <- cacheList$get()
inv <- solve(data)
cacheList$setinv(inv)
inv
}
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function(){
x
}
setinv <- function(m){
inv <<- solve(m)
}
getinv <- function(){
inv
}
cacheList <<- list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(m, ...) {
inv <- makeCacheMatrix()$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(m)
}
data <- cacheList$get()
inv <- solve(data)
cacheList$setinv(inv)
inv
}
cacheSolve(x)
cacheList$get()
cacheList$get(m)
cacheList$get(x)
cacheList$get(x1:2)
cacheList$get(1:2)
cacheList$set()
cacheList$set(m)
m
cacheList$get()
cacheSolve(x)
cacheList(m)$setinv()
cacheList$setinv()
cacheList$setinv(m)
cacheList$setinv(x)
